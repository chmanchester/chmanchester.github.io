<?xml version="1.0" encoding="utf-8"?> 
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
 <title type="text">chmanchester's blog: Posts tagged 'mozilla'</title>
 <link rel="self" href="http://chmanchester.github.io/feeds/mozilla.atom.xml" />
 <link href="http://chmanchester.github.io/tags/mozilla.html" />
 <id>urn:http-chmanchester-github-io:-tags-mozilla-html</id>
 <updated>2015-08-06T17:50:50Z</updated>
 <entry>
  <title type="text">Defining Semi-Automatic Test Prioritization</title>
  <link rel="alternate" href="http://chmanchester.github.io/blog/2015/08/06/defining-semi-automatic-test-prioritization/?utm_source=mozilla&amp;utm_medium=Atom" />
  <id>urn:http-chmanchester-github-io:-blog-2015-08-06-defining-semi-automatic-test-prioritization</id>
  <published>2015-08-06T17:50:50Z</published>
  <updated>2015-08-06T17:50:50Z</updated>
  <author>
   <name>Chris</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;We run a lot of tests against Firefox, and running them takes a long time. Ideally, a best effort test selection is done on try, and if nothing obvious shakes out of that a change is landed on inbound. Inbound runs a selection of test jobs pared down based on coarse historical data (SETA). Modulo a handful of periodic build types, the remaining integration branches run a full set of tests and builds.&lt;/p&gt;

&lt;p&gt;With the exception of the (entirely optional) selection made by try syntax, none of these steps codify the idea that some tests might fail given a particular change, and others are unlikely to fail or never will.&lt;/p&gt;

&lt;p&gt;This post outlines one approach to implementing smarter (semi-automatic) test selection for Gecko.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;h3 id="inputs"&gt;Inputs&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;Source file changes&lt;/li&gt;
 &lt;li&gt;A set of test files given a set of changed source files&lt;/li&gt;
 &lt;li&gt;A set of test platforms given a set of changed source files&lt;/li&gt;
 &lt;li&gt;A mapping from test files to an idea of how to run them&lt;/li&gt;&lt;/ul&gt;

&lt;h3 id="outputs"&gt;Outputs&lt;/h3&gt;

&lt;ul&gt;
 &lt;li&gt;Platforms&lt;/li&gt;
 &lt;li&gt;Build types&lt;/li&gt;
 &lt;li&gt;Test sets&lt;/li&gt;
 &lt;li&gt;Test suites&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a sketch of how this could work. This list doesn&amp;rsquo;t have a lot of regard for what I think is feasible in the short term. In particular, code coverage data for Mozilla&amp;rsquo;s code base is not readily available.&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;Source file changes for a push come from hg. This should be extractable  from a user&amp;rsquo;s machine or hg.mozilla.org.&lt;/li&gt;
 &lt;li&gt;The build system (particularly moz.build file metadata) establishes an  initial mapping from source files to test files based on the proximity of  sources to test manifests and user input (annotations).&lt;/li&gt;
 &lt;li&gt;Auxilliary sources of data enhance and expand dependency information. A  variety of sources could be useful:
  &lt;ul&gt;
   &lt;li&gt;Static dependencies: if A includes B, changing B could break A. This could  be derived from static analysis of source files (import/#includes), or  estimated based on dependencies defined by the build system.&lt;/li&gt;
   &lt;li&gt;Code coverage: if A runs as a result of test B, test B might fail because  of a change to A. If A does not run as a result of test B, test B is  unlikely to fail as a result of a change to A.  (Many test case prioritization techniques involve code coverage in some  way&lt;sup&gt;&lt;a href="#2015-07-23-defining-semi-automatic-test-selection-footnote-1-definition" name="2015-07-23-defining-semi-automatic-test-selection-footnote-1-return"&gt;1&lt;/a&gt;&lt;/sup&gt;)&lt;/li&gt;
   &lt;li&gt;Historical data: if changing A has made test B fail in the past, perhaps  it will do so again in the future. If changing A very frequently causes  test failures, perhaps we should expand our test set for a change to A.&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;
 &lt;li&gt;The result is used to map source files to test files. Test files can  usually be mapped to automation jobs by consulting the build system for  a test flavor and finding the equivalent builder and suite category in  automation.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;After this process, platforms and build types are still not known. Build types are things like opt, debug, and pgo, while platforms are things like Windows or B2G. In general we can&amp;rsquo;t expect a set of changed files to suggest a test platform and build type (many changes will impact code that runs across platforms and build types), but when all changes are in a subdirectory known to impact a single platform, we can be confident selecting only that platform. I expect these classifications are coarse and stable enough to capture effectively with annotations in moz.build files.&lt;/p&gt;

&lt;p&gt;This is the framework I&amp;rsquo;m planning to use to get this off the ground in the coming months. Initial work around fleshing out moz.build file metadata is tracked in &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1184405"&gt;bug 1184405&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Feedback is welcome and appreciated.&lt;/p&gt;

&lt;div class="footnotes"&gt;
 &lt;ol&gt;
  &lt;li id="2015-07-23-defining-semi-automatic-test-selection-footnote-1-definition" class="footnote-definition"&gt;
   &lt;p&gt;For instance, &lt;a href="http://digitalcommons.unl.edu/cgi/viewcontent.cgi?article=1031&amp;amp;context=csetechreports"&gt;&amp;ldquo;Prioritizing test cases for regression testing&amp;rdquo;&lt;/a&gt;&amp;nbsp;&lt;a href="#2015-07-23-defining-semi-automatic-test-selection-footnote-1-return"&gt;â†©&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Introducing mach try</title>
  <link rel="alternate" href="http://chmanchester.github.io/blog/2015/07/26/introducing-mach-try/?utm_source=mozilla&amp;utm_medium=Atom" />
  <id>urn:http-chmanchester-github-io:-blog-2015-07-26-introducing-mach-try</id>
  <published>2015-07-27T01:41:38Z</published>
  <updated>2015-07-27T01:41:38Z</updated>
  <author>
   <name>Chris</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;This is a short introduction to mach try, a mach command that simplifies the process of selecting tests and pushing them to the try server.&lt;/p&gt;
&lt;!-- more--&gt;

&lt;p&gt;To follow along at home you&amp;rsquo;ll either need to be using git cinnabar or have a modern mercurial and the hg &amp;ldquo;push-to-try&amp;rdquo; extension (available from |mach mercurial-setup|). Append &amp;mdash;no-push to commands to keep them from pushing to the try server, and -n to see verbose messages associated with the results of commands.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# mach try is a command that takes try syntax and automates the steps
# to push the current tree to try with that syntax.
# For instance:

$ ./mach try -p win32 -u mochitest-bc

# ... will result in pushing "try: -b do -p win32 -u mochitest-bc -t none"
# to try. This saves dealing with mq or other ways of generating the try
# message commit. (An in-memory commit is generated with the appropriate
# message -- mq is not invoked at any stage).

# The more novel feature exposed by mach try is the ability to select
# specific test directories containing xpcshell, mochitests or reftests
# to run on the try server.

# For instance, if I've just made a change to one of the python libraries
# used by our test harnesses, and I'd like to quickly check that this
# feature works on windows. I can run:

$ ./mach try -p win64 testing/xpcshell testing/mochitest/tests

# This will result in the small number of xpcshell and mochitest tests
# that live next to their harnesses being run (in a single chunk) on
# try, so I can get my results without waiting for the entire suite,
# and I don't need to sift through logs to figure out which chunk a
# test lives in when I only care about running certain tests.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For more details run ./mach help try. As the command will inform you, this feature is under development &amp;mdash; bugs should be filed blocking &lt;a href="https://bugzilla.mozilla.org/show_bug.cgi?id=1149670"&gt;bug 1149670&lt;/a&gt;).&lt;/p&gt;&lt;/html&gt;</content></entry>
 <entry>
  <title type="text">Automatic triggering on try server</title>
  <link rel="alternate" href="http://chmanchester.github.io/blog/2015/07/15/automatic-triggering-on-try-server/?utm_source=mozilla&amp;utm_medium=Atom" />
  <id>urn:http-chmanchester-github-io:-blog-2015-07-15-automatic-triggering-on-try-server</id>
  <published>2015-07-15T21:44:13Z</published>
  <updated>2015-07-15T21:44:13Z</updated>
  <author>
   <name>Chris</name></author>
  <content type="html">&lt;html&gt;
&lt;p&gt;If you&amp;rsquo;ve pushed to Mozilla&amp;rsquo;s try server recently, you&amp;rsquo;ve probably noticed some of your failures being re-triggered automatically. This happens courtesy of the &lt;a href="https://github.com/chmanchester/trigger-bot"&gt;trigger bot&lt;/a&gt; tool implemented as a pulse listener that invokes self-serve in response to certain events.&lt;/p&gt;

&lt;p&gt;Two trigerring rules are currently implemented:&lt;/p&gt;

&lt;ul&gt;
 &lt;li&gt;When a test fails it&amp;rsquo;s triggered one more time, up to a certain portion of all  jobs for the push.&lt;/li&gt;
 &lt;li&gt;When &lt;code&gt;--rebuild&lt;/code&gt; is found in try syntax, all test jobs for that push are  triggered the specified number of times.&lt;/li&gt;&lt;/ul&gt;

&lt;p&gt;Finally, if &lt;code&gt;--rebuild&lt;/code&gt; is specified, nothing gets triggered when a test fails, and if &lt;code&gt;--no-retry&lt;/code&gt; is found in try syntax, no triggering happens for the push.&lt;/p&gt;

&lt;p&gt;This was enabled at the end of June, and I&amp;rsquo;ve gotten a bit of feedback (almost mostly positive). My own curiosity is about the overall volume of these jobs, so I pulled some stats from self-serve to see how much we&amp;rsquo;ve ended up triggering. For the first 2 weeks of July, there were &lt;strong&gt;373,772&lt;/strong&gt; jobs on try, &lt;strong&gt;13,099&lt;/strong&gt; of which were initiated by the trigger-bot (&lt;strong&gt;3.5%&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;This is a larger proportion than I think it should be, but we&amp;rsquo;ve recently landed changes that mean we will trigger fewer hidden jobs. Hidden jobs are usually hidden due to failing persistently, so this should reduce overall triggering.&lt;/p&gt;

&lt;p&gt;The rudimentary script I used to gather these stats is available on the &lt;a href="https://github.com/chmanchester/trigger-bot/commit/845bdf3737b5c4bff2a38c45311f71c96ec450dc"&gt;trigger-bot repo&lt;/a&gt;&lt;/p&gt;
&lt;!-- more--&gt;&lt;/html&gt;</content></entry></feed>